version: '3.8'

services:
  ecommerce-api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - JWT_SECRET=${JWT_SECRET:-YourSecretKeyHere12345678901234567890}
      - JWT_ISSUER=${JWT_ISSUER:-OnlineStoreWebAPI}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-OnlineStoreClient}
      - JWT_ACCESS_TOKEN_EXPIRATION_MINUTES=${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:-30}
      - JWT_REFRESH_TOKEN_EXPIRATION_DAYS=${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:-30}
      - DB_CONNECTION_STRING=Host=db;Port=5432;Database=ECommerceDB;Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-1234}
      - REDIS_CONNECTION_STRING=redis:6380
      - IYZICO_API_KEY=${IYZICO_API_KEY:-YourIyzicoApiKey}
      - IYZICO_SECRET_KEY=${IYZICO_SECRET_KEY:-YourIyzicoSecretKey}
      - IYZICO_BASE_URL=${IYZICO_BASE_URL:-https://sandbox-api.iyzipay.com}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: ${POSTGRES_DB:-ECommerceDB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
